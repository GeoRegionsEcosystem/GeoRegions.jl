import{_ as s,c as a,a5 as i,o as n}from"./chunks/framework.DMxYrb0F.js";const g=JSON.parse('{"title":"Reading Predefined GeoRegions","description":"","frontmatter":{},"headers":[],"relativePath":"basics/read.md","filePath":"basics/read.md","lastUpdated":null}'),t={name:"basics/read.md"};function o(p,e,d,l,h,r){return n(),a("div",null,e[0]||(e[0]=[i(`<h1 id="Reading-Predefined-GeoRegions" tabindex="-1">Reading Predefined <code>GeoRegion</code>s <a class="header-anchor" href="#Reading-Predefined-GeoRegions" aria-label="Permalink to &quot;Reading Predefined \`GeoRegion\`s {#Reading-Predefined-GeoRegions}&quot;">â€‹</a></h1><p>The most basic functionality is to retrieve the information of a <code>GeoRegion</code>. There are several sets of predefined GeoRegions in GeoRegions.jl, listed <a href="./predefined">here</a>.</p><p>You can read and retrieve the properties of a <code>GeoRegion</code> using the function <code>GeoRegion()</code> for a given <code>ID</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeoRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ID)</span></span></code></pre></div><p>For example, the default <code>GeoRegion</code> spans the whole globe, and therefore has the ID <code>GLB</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeoRegions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">geo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GeoRegion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GLB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The Rectilinear Region GLB has the following properties:</span></span>
<span class="line"><span>    Region ID    (ID) : GLB</span></span>
<span class="line"><span>    Parent ID   (pID) : GLB</span></span>
<span class="line"><span>    Name       (name) : Globe</span></span>
<span class="line"><span>    Bounds  (N,S,E,W) : [90.0, -90.0, 360.0, 0.0]</span></span>
<span class="line"><span>        (is180,is360) : (false, true)</span></span></code></pre></div><p>This is the most basic, and yet the most important, functionality of GeoRegions.jl. For the full API of the function <code>GeoRegion()</code> that talks about more advanced uses, see the section on <a href="/GeoRegions.jl/dev/tutorials/overview">reading custom GeoRegions</a></p>`,8)]))}const k=s(t,[["render",o]]);export{g as __pageData,k as default};
