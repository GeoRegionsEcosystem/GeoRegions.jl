import{_ as e,c as i,o,a7 as t}from"./chunks/framework.WgvfZnk2.js";const u=JSON.parse('{"title":"What is a RegionGrid?","description":"","frontmatter":{},"headers":[],"relativePath":"regiongrids/intro.md","filePath":"regiongrids/intro.md","lastUpdated":null}'),a={name:"regiongrids/intro.md"},n=t(`<h1 id="What-is-a-RegionGrid?" tabindex="-1">What is a RegionGrid? <a class="header-anchor" href="#What-is-a-RegionGrid?" aria-label="Permalink to &quot;What is a RegionGrid? {#What-is-a-RegionGrid?}&quot;">​</a></h1><p>But how do we go from defining a GeoRegion, to <strong>extracting data</strong> for that GeoRegion? The answer is with the information in the <code>RegionGrid</code> types, which maps gridded lon-lat data to a given GeoRegion as follows:</p><ul><li><p>Mapping gridded lon-lat data to a <strong><code>RectRegion</code></strong> gives a <code>RectGrid</code> structure</p></li><li><p>Mapping gridded lon-lat data to a <strong><code>PolyRegion</code></strong> gives a <code>PolyGrid</code> structure</p></li><li><p>Mapping non-rectilinear gridded lon-lat data to a <strong><code>RegionMask</code></strong> gives a <code>RegionMask</code> structure</p></li></ul><p>However, the basic uses of <code>RectGrid</code> and <code>PolyGrid</code> are the same, and as such their differences are largely transparent to the user, except for one field found in <code>PolyGrid</code>, the <code>mask</code>, which will be elaborated upon later.</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="GeoRegions.RegionGrid" href="#GeoRegions.RegionGrid">#</a> <b><u>GeoRegions.RegionGrid</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RegionGrid</span></span></code></pre></div><p>Abstract supertype for geographical region gridded information, with the following subtypes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>RectGrid{FT&lt;:Real} &lt;: RegionGrid</span></span>
<span class="line"><span>PolyGrid{FT&lt;:Real} &lt;: RegionGrid</span></span>
<span class="line"><span>RegionMask{FT&lt;:Real} &lt;: RegionGrid</span></span></code></pre></div><p>Both <code>RectGrid</code> and <code>PolyGrid</code> types contain the following fields:</p><ul><li><p><code>grid</code> - A vector of <code>Int</code>s defining the gridpoint indices of the [N,S,E,W] points respectively</p></li><li><p><code>lon</code> - A vector of <code>Float</code>s defining the latitude vector describing the region</p></li><li><p><code>lat</code> - A vector of <code>Float</code>s defining the latitude vector describing the region</p></li><li><p><code>ilon</code> - A vector of <code>Int</code>s defining indices of the parent longitude vector describing the region</p></li><li><p><code>ilat</code> - A vector of <code>Int</code>s defining indices of the parent latitude vector describing the region</p></li></ul><p>A <code>PolyGrid</code> type will also contain the following field:</p><ul><li><code>mask</code> - An array of 0s and 1s defining a non-rectilinear shape within a rectilinear grid where data is valid (only available in PolyGrid types)</li></ul><p>A <code>RegionMask</code> type will contain the following fields:</p><ul><li><p><code>lon</code> - An array of longitude points</p></li><li><p><code>lat</code> - An array of latitude points</p></li><li><p><code>mask</code> - An array of NaNs and 1s defining the region within the original field in which data points are valid</p></li></ul><p><a href="https://github.com/JuliaClimate/GeoRegions.jl/blob/9767a44733b7638ef79564e834577809ef12e197/src/GeoRegions.jl#L81-L104" target="_blank" rel="noreferrer">source</a></p></div><br><p>So basically a <code>RegionGrid</code> contains information on the indices of the gridded data that are part of the <code>GeoRegion</code>, thus helping us extract the relevant data for a given <code>GeoRegion</code>.</p>`,7),d=[n];function r(s,l,c,p,g,h){return o(),i("div",null,d)}const R=e(a,[["render",r]]);export{u as __pageData,R as default};
