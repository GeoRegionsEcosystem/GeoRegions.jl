import{_ as o,c as a,a4 as i,o as t}from"./chunks/framework.CEeYBNx8.js";const h=JSON.parse('{"title":"Comparing GeoRegions","description":"","frontmatter":{},"headers":[],"relativePath":"basics/using/isequal.md","filePath":"basics/using/isequal.md","lastUpdated":null}'),n={name:"basics/using/isequal.md"};function s(c,e,r,l,d,u){return t(),a("div",null,e[0]||(e[0]=[i('<h1 id="Comparing-GeoRegions" tabindex="-1">Comparing GeoRegions <a class="header-anchor" href="#Comparing-GeoRegions" aria-label="Permalink to &quot;Comparing GeoRegions {#Comparing-GeoRegions}&quot;">​</a></h1><p>Now, suppose we have two different GeoRegions, we have constructed several different ways of defining equivalence:</p><h2 id="1.-Are-two-GeoRegions-Equivalent" tabindex="-1">1. Are two GeoRegions Equivalent <a class="header-anchor" href="#1.-Are-two-GeoRegions-Equivalent" aria-label="Permalink to &quot;1. Are two GeoRegions Equivalent {#1.-Are-two-GeoRegions-Equivalent}&quot;">​</a></h2><p>If you want to check that two GeoRegions are equivalent, we can use the <code>==</code> or <code>isequal()</code> functions. For <code>==</code> or <code>isequal</code> to return true, the following conditions must be satisfied: * The <code>ID</code> and <code>pID</code> fields are the same * The <code>shape</code> fields define exactly the same geographic region as per the function <code>on()</code></p><div class="tip custom-block"><p class="custom-block-title">Equivalent Regions in GeoRegions.jl</p><p>For regions to be equivalent to each other in GeoRegions.jl, they do not need to be defined exactly in the same way.</p><ol><li><p>the regions can be offset by 360º</p></li><li><p>the coordinates can be a <code>circshift()</code> version of each other.</p></li></ol></div>',5)]))}const g=o(n,[["render",s]]);export{h as __pageData,g as default};
